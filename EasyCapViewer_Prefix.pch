/* Copyright (c) 2009, Ben Trask
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY BEN TRASK ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL BEN TRASK BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
#if defined(__OBJC__)
#import <Cocoa/Cocoa.h>

static NSRect const ECVUncroppedRect = {{0.0f, 0.0f}, {1.0f, 1.0f}};
static NSUInteger const ECVMicrosecondsPerMillisecond = 1000;
static NSUInteger const ECVMicrosecondsPerSecond = 1000 * 1000;

enum {
	ECVFullFrame = 0,
	ECVHighField = 1,
	ECVLowField = 2,
};
typedef NSUInteger ECVFieldType;

typedef struct {
	NSInteger x;
	NSInteger y;
} ECVIntegerPoint;

typedef struct {
	NSUInteger width;
	NSUInteger height;
} ECVIntegerSize;

typedef struct {
	ECVIntegerPoint origin;
	ECVIntegerSize size;
} ECVIntegerRect;

NS_INLINE NSSize ECVIntegerSizeToNSSize(ECVIntegerSize s)
{
	return NSMakeSize(s.width, s.height);
}
NS_INLINE ECVIntegerSize ECVIntegerSizeFromNSSize(NSSize s)
{
	return (ECVIntegerSize){round(s.width), round(s.height)};
}
NS_INLINE ECVIntegerSize ECVIntegerSizeFromString(NSString *str)
{
	return ECVIntegerSizeFromNSSize(NSSizeFromString(str));
}
NS_INLINE BOOL ECVEqualPixelSizes(ECVIntegerSize a, ECVIntegerSize b)
{
	return a.width == b.width && a.height == b.height;
}
NS_INLINE NSRect ECVScaledRect(NSRect r, NSSize s)
{
	return NSMakeRect(NSMinX(r) * s.width, NSMinY(r) * s.height, NSWidth(r) * s.width, NSHeight(r) * s.height);
}
static size_t ECVPixelFormatBytesPerPixel(OSType format)
{
	switch(format) {
		case k2vuyPixelFormat: return 2; // kCVPixelFormatType_422YpCbCr8, k422YpCbCr8CodecType
		case k24RGBPixelFormat: return 3; // kCVPixelFormatType_24RGB
	}
	assert(0); // TODO: Use one of our ECVDebug.h macros.
	return 0;
}

#endif // __OBJC__

#define numberof(x) (sizeof(x) / sizeof(x[0]))
#define CLAMP(min, x, max) MIN(MAX((min), (x)), (max))
#define SUB_ZERO(minuend, subtrahend) ({ __typeof__(minuend) const __m = (minuend); __typeof__(subtrahend) const __s = (subtrahend); __m > __s ? __m - __s : 0; })
